{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["S1mw7ZRKUn-U","8CZivcMNVdGz","g1HfDcGbZvfv","sxdBFDc1nqOh","VODD7QRwslRd","2dU91EVEekXV"],"authorship_tag":"ABX9TyPDWFjJIjXouuQD4YK9ankE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Bootcamp 2023 - W1D2 - Data structures\n","\n","This notebook covers the basic use of the primary python data structures."],"metadata":{"id":"LhkBMwjVQdNZ"}},{"cell_type":"markdown","source":["## Exercise 1: *list*"],"metadata":{"id":"XCTvkxsET1eu"}},{"cell_type":"markdown","source":["### a) Construct list variable `list_1a` that consists variables 8, 99, -1, 35, 62, 74. Try adding the number 99 at the end of the list and remove the -1 in the list.\n","\n","### b) Construct list variable `list_1b` that consists variables: '1', [] and 0. Insert the string \"Hello World!\" after the first item.\n","\n","### c) Construct list variable `list_1c` with a for loop that consists every other number starting from 1 and stops before reaching 100.\n","\n","hint 2: Check out the documentation of python function range with `?range`"],"metadata":{"id":"GpJBEisbQ0To"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"kXyChnl9Pm51"},"outputs":[],"source":["## a) Your code starts here\n","\n","## b) Your code starts here\n","\n","## c) Your code starts here"]},{"cell_type":"markdown","source":["#### Hidden tests"],"metadata":{"id":"S1mw7ZRKUn-U"}},{"cell_type":"code","source":["## Test for Exercise 1, part 1\n","\n","assert list_1a == [8, 99, 35, 63, 74, 99], \"Test for exercise 1a failed\"\n","assert list_1b == ['1', \"Hello World!\", [], 0], \"Test for exercise 1b failed\"\n","assert list_1c == [*range(1, 100)][::2], \"Test for exercise 1c failed\""],"metadata":{"id":"Sf6ZWTY1UnAr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### d) Store the length of `list_1c` in the variable `ans_1d`\n","\n","### e) Store the type of `list_1c` in the variable `ans_1e`\n","\n","### f) Sort the list `list_1a` in descending order"],"metadata":{"id":"y0uV0xQQTtC1"}},{"cell_type":"code","source":["## d) Your code starts here\n","\n","## e) Your code starts here\n","\n","## f) Your code starts here\n"],"metadata":{"id":"OTjGzA8lTFgC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Hidden tests"],"metadata":{"id":"8CZivcMNVdGz"}},{"cell_type":"code","source":["## Tests for Exercise 1, part 2\n","\n","assert ans_1d == 50, \"Test for exercise 1d failed\"\n","assert ans_1e == list, \"Test for exercise 1e failed\"\n","assert list_1a == [99, 99, 74, 63, 35, 8], \"Test for exercise 1f failed\""],"metadata":{"id":"QrZMz4kLVfDG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### g) Access the first item of list `list_1b` in the variable `ans_1g`\n","\n","### h) Store the last item of list `list_1b` in the variable `ans_1h`\n","\n","### i) Store the last 5 items of list `list_1c` in the variable `ans_1i`\n","\n","### j) Store the 23rd to 31st item of list `list_1c` in the. variabel `ans_1j`"],"metadata":{"id":"DMMNNwO8baC0"}},{"cell_type":"code","source":["## g) Your code starts here\n","\n","## h) Your code starts here\n","\n","## i) Your code starts here\n","\n","## j) Your code starts here\n"],"metadata":{"id":"c32GA5VSb3Ot"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Hidden tests"],"metadata":{"id":"g1HfDcGbZvfv"}},{"cell_type":"code","source":["## Tests for Exercise 1, part 3\n","\n","assert ans_1g == '1', \"Test for exercise 1g failed\"\n","assert ans_1h == 0, \"Test for exercise 1h failed\"\n","assert ans_1i == [91, 93, 95, 97, 99], \"Test for exercise 1i failed\"\n","assert ans_1j == [45, 47, 49, 51, 53, 55, 57, 59, 61], \"Test for exervise 1j failed\""],"metadata":{"id":"6Xgt9tDLcXAl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### [Challenge] k): Merge list `data_1j_1` and `data_1j_2` in `list_1j`, where each element of `list_1j` is constructed as 2 * `data_1j_1` + .5 * `data_1j_2`. Identify every element of `list_1j` that is larger than 100 and replace them as -1."],"metadata":{"id":"xBjgiZFsc867"}},{"cell_type":"code","source":["data_1k_1 = [26, 23, 23, 24, 28,\n","             28, 15, 29, 23, 20,\n","             24, 24, 18, 29, 20,\n","             22, 21, 25, 25, 28,\n","             28, 17, 25, 26, 17,\n","             19, 22, 29, 24, 22]\n","\n","data_1k_2 = [80, 55, 109, 53, 55,\n","             140, 77, 108, 76, 66,\n","             92, 124, 126, 73, 67,\n","             97, 113, 85, 115, 74,\n","             145, 121, 75, 122, 114,\n","             64, 88, 139, 140, 90]\n","\n","## k) Your code starts here"],"metadata":{"id":"Y778cKRylN-0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### hidden tests"],"metadata":{"id":"sxdBFDc1nqOh"}},{"cell_type":"code","source":["assert len(list_1k) == 30, \"Length inconsistent with instructions\"\n","for i in list_1k:\n","  if i > 100:\n","    assert False, \"Values larger than 100 found\""],"metadata":{"id":"WawioP-Wm_Tl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Exercise 2: Dictionary"],"metadata":{"id":"E9cfDi_voUus"}},{"cell_type":"markdown","source":["### a) Define a dictionary `dict_2a` with these key-value pairs: \"a\" -> 5, \"b\" -> 33, \"c\" -> 46, \"d\" -> 2, \"e\" -> 78, \"f\" -> 92. Add an additional key-value pair \"g\" -> 55 into the dictionary\n","\n","### b) Save all keys in `keys_2a` and all values in `values_2a`\n","\n","### c) Define a dictionary `small_dict` with these key-value pairs: \"g\" -> 2, \"h\" -> 5, \"i\" -> 78, merge `small_dict` into `dict_2a` and store it in `dict_2c`"],"metadata":{"id":"UT3AVnjApfZp"}},{"cell_type":"code","source":["## a) Your code starts here\n","\n","## b) Your code starts here\n","\n","## c) Your code starts here\n"],"metadata":{"id":"XMfGUQtDoEw9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Hidden tests"],"metadata":{"id":"VODD7QRwslRd"}},{"cell_type":"code","source":["dict_2a_ans = {\"a\": 5, \"b\": 33, \"c\": 46, \"d\": 2, \"e\": 78, \"f\": 92, \"g\": 55}\n","\n","assert dict_2a == dict_2a_ans, \"Test for exercise 2a failed\"\n","assert keys_2a == dict_2a_ans.keys(), \"Test for exercise 2b failed\"\n","assert values_2a == dict_2a_ans.items(), \"Test for exercise 2b failed\"\n","\n","small_dict_ans = {\"g\": 2, \"h\": 5, \"i\": 78}\n","\n","dict_2c_ans = {**dict_2a_ans, **small_dict_ans}\n","assert dict_2c == dict_2c_ans"],"metadata":{"id":"OtSCgyxssjsE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### d) Create a new dictionary `dict_2d` that only contain pairs from `dict_2a` where values are larger than 10.\n","\n","### e) Create a new dictionary `dict_2d` that only contain pairs from `dict_2a` where values larger are than 10 and keys are within the set {a, b, c, e}\n","\n","### f) Create a new dictionary `dict_2` where the key-value pairs in `dict_2a` are inverted from key->value to value->key without typing manually. (e.g. {5: 'a'})"],"metadata":{"id":"W2zgurRFtaTn"}},{"cell_type":"code","source":["### d) Your code starts here\n","\n","### e) Your code starts here\n","\n","### f) Your code starts here\n"],"metadata":{"id":"FbRTzju2c1aW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Hidden tests"],"metadata":{"id":"2dU91EVEekXV"}},{"cell_type":"code","source":["assert len(dict_2d) == 5, \"Tests for exercise 2d failed\"\n","assert len(dict_2e) == 2, \"Tests for exercise 2e failed\"\n","assert dict_2f == {5: 'a', 33: 'b', 46: 'c', 2: 'd', 78: 'e', 92: 'f', 55: 'g'}, \"Tests for exercise 2f failed\""],"metadata":{"id":"1FI64Fj8ez5M"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Exercise 3: Stacks and queues\n","\n","Stacks and queues are two abstract data structures we talked about during the lecture. Try to implement a simple stack and queue with Python lists."],"metadata":{"id":"HR07SwAvU-O-"}},{"cell_type":"markdown","source":["### Stacks\n","\n","### a) You wanted to add some additional names to the stack, try pushing the names `Henry`, `Lucas`, `Ava`, `Mia` to the stack sequentially. If you are to pop the stack twice, what will be the order of names popped out? What is now the length of the stack?\n","\n","### b) You don't need to write the code (only if you want to), but what are the steps you need to do to reverse the whole stack, where `Olivia` is in the top of the stack? How many operations do you need?\n","\n","### Queue\n","\n","### c) Using the same list of names, now this is a queue where the operations are very different from stack. Again try pushing the names `Henry`, `Lucas`, `Ava`, `Mia` to the queue sequentially, if you are to pop the queue twice, what will be the order of names popped out?"],"metadata":{"id":"ZpL5YFRXWl2r"}},{"cell_type":"code","source":["## Taken from the most popular names 2022 (https://www.ssa.gov/oact/babynames/limits.html)\n","## a) Your code starts here\n","name_stack = ['Olivia', 'Emma', 'Charlotte', 'Amelia', 'Liam', 'Noah', 'Oliver', 'James']\n","\n","## b) Your code starts here\n","name_queue = ['Olivia', 'Emma', 'Charlotte', 'Amelia', 'Liam', 'Noah', 'Oliver', 'James']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y23x_NhaU88-","executionInfo":{"status":"ok","timestamp":1691183624956,"user_tz":240,"elapsed":154,"user":{"displayName":"Tat Tsin","userId":"07234169979918059445"}},"outputId":"0ee24348-7860-4a61-fee8-ea331ec4b21b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["## Exercise 4: Error Analysis\n","\n","The following code blocks contain common erros when dealing with python data types, try to think through the setup or with the help of [stackoverflow](https://stackoverflow.com/) to solve these errors with the correct code.\n","\n"],"metadata":{"id":"J9XKnstZRD4y"}},{"cell_type":"code","source":["## How do we access the last item?\n","error1_list = list(range(100))\n","error1_list[100]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":200},"id":"0xb-qRQxRJ1o","executionInfo":{"status":"error","timestamp":1691181774151,"user_tz":240,"elapsed":192,"user":{"displayName":"Tat Tsin","userId":"07234169979918059445"}},"outputId":"4b4956e3-be8d-4c05-d1f8-1260fae4defc"},"execution_count":null,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-db17e7412f10>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0merror1_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0merror1_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}]},{"cell_type":"code","source":["## I want to access the item 'a'\n","\n","error2_dict = {1: 'a', 2: 'abc', 3: 'abcd', 4: 'abcde', 5: 'abcdef'}\n","error2_dict['a']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":200},"id":"0ADzUvirSkzV","executionInfo":{"status":"error","timestamp":1691181877504,"user_tz":240,"elapsed":132,"user":{"displayName":"Tat Tsin","userId":"07234169979918059445"}},"outputId":"2b88d7fb-869f-4720-a2b8-d11717d936c7"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-2ca9e8e99cef>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0merror2_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'a'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'abc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'abcd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'abcde'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'abcdef'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0merror2_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'a'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mKeyError\u001b[0m: 'a'"]}]}]}